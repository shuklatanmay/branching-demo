name: Deploy to Staging

on:
  push:
    branches:
      - main  # Replace with your main branch name
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment name'
        required: true
        default: 'staging'

jobs:
  deploy-to-dev:
    runs-on: ubuntu-latest
    environment:
      name: development

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 # More information on this action can be found below in the 'AWS Credentials' section
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR Dev
        id: login-ecr-dev
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push docker image to Amazon ECR Dev
        env:
          REGISTRY: ${{ steps.login-ecr-dev.outputs.registry }}
          REPOSITORY: ${{ secrets.AWS_ECR_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

  deploy-to-qa:
    runs-on: ubuntu-latest
    needs: deploy-to-dev
    environment:
      name: staging

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 # More information on this action can be found below in the 'AWS Credentials' section
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR Staging (QA)
        id: login-ecr-qa
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push docker image to Amazon ECR Dev
        env:
          REGISTRY: ${{ steps.login-ecr-qa.outputs.registry }}
          REPOSITORY: ${{ secrets.AWS_ECR_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

          
  create-release:
    runs-on: ubuntu-latest
    needs: deploy-to-qa
    environment:
      name: staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Create Release Tag
        id: create-release-tag
        run: |
          echo "tag_name=r-$(printf %04d $GITHUB_RUN_NUMBER)" >> $GITHUB_OUTPUT
      
      - name: Create Draft Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.create-release-tag.outputs.tag_name }}
          name: Release ${{ steps.create-release-tag.outputs.tag_name }}
          body: |
            ## Info
            Docker image for commit ${{ github.sha }} was deployed to `staging`.
            
            It was initialized by [${{ github.event.sender.login }}](${{ github.event.sender.html_url }}).
            
            ## How to Promote?
            In order to promote this to `production`, edit the draft and press **"Publish release"**.
          draft: true
          token: ${{ secrets.YOUR_GITHUB_TOKEN }}
